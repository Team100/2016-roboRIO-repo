// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeft;
    public static SpeedController driveTrainRight;
    public static RobotDrive driveTrainTwoMotorDrive;
    public static AnalogInput driveTrainIRDistanceSensor;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static DigitalInput pickUpUpperLimit;
    public static DigitalInput pickUpLowerLimit;
    public static SpeedController pickUpArmAngleMotor;
    public static Encoder pickUpArmAngleSensor;
    public static AnalogPotentiometer pickUpPickUpPot;
    public static SpeedController pickUpPickUpRoller;
    public static DigitalInput pickUpPortcullisSensor;
    public static DigitalInput loaderPinballLoaded;
    public static DoubleSolenoid loaderPinballBallHandlerSolenoid1;
    public static DoubleSolenoid loaderPinballBallHandlerSolenoid2;
    public static SpeedController shooterFlyMotor;
    public static Encoder shooterFlyEncoder;
    public static PIDController shooterShooterSpeedControllerPID;
    public static SpeedController turretHorizontalPivot;
    public static DigitalInput turretLeftSideLimit;
    public static DigitalInput turretRightSideLimit;
    public static Encoder turretPivotEncoder;
    public static SpeedController unbeatableScalingMechanismWinchMotor;
    public static SpeedController unbeatableScalingMechanismHookExtension;
    public static DigitalInput unbeatableScalingMechanismClimberLimit;
    public static Compressor pneumaticsCompressor;
    public static DoubleSolenoid pushUpPushUpPiston;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeft = new VictorSP(0);
        LiveWindow.addActuator("Drive Train", "Left", (VictorSP) driveTrainLeft);
        
        driveTrainRight = new VictorSP(1);
        LiveWindow.addActuator("Drive Train", "Right", (VictorSP) driveTrainRight);
        
        driveTrainTwoMotorDrive = new RobotDrive(driveTrainLeft, driveTrainRight);
        
        driveTrainTwoMotorDrive.setSafetyEnabled(true);
        driveTrainTwoMotorDrive.setExpiration(0.1);
        driveTrainTwoMotorDrive.setSensitivity(0.5);
        driveTrainTwoMotorDrive.setMaxOutput(1.0);
        driveTrainTwoMotorDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainIRDistanceSensor = new AnalogInput(0);
        LiveWindow.addSensor("Drive Train", "IR Distance Sensor", driveTrainIRDistanceSensor);
        
        driveTrainLeftEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Left Encoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive Train", "Right Encoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        pickUpUpperLimit = new DigitalInput(4);
        LiveWindow.addSensor("Pick Up", "Upper Limit", pickUpUpperLimit);
        
        pickUpLowerLimit = new DigitalInput(5);
        LiveWindow.addSensor("Pick Up", "Lower Limit", pickUpLowerLimit);
        
        pickUpArmAngleMotor = new VictorSP(2);
        LiveWindow.addActuator("Pick Up", "Arm Angle Motor", (VictorSP) pickUpArmAngleMotor);
        
        pickUpArmAngleSensor = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Pick Up", "Arm Angle Sensor", pickUpArmAngleSensor);
        pickUpArmAngleSensor.setDistancePerPulse(1.0);
        pickUpArmAngleSensor.setPIDSourceType(PIDSourceType.kRate);
        pickUpPickUpPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Pick Up", "PickUpPot", pickUpPickUpPot);
        
        pickUpPickUpRoller = new VictorSP(3);
        LiveWindow.addActuator("Pick Up", "Pick Up Roller", (VictorSP) pickUpPickUpRoller);
        
        pickUpPortcullisSensor = new DigitalInput(8);
        LiveWindow.addSensor("Pick Up", "Portcullis Sensor", pickUpPortcullisSensor);
        
        loaderPinballLoaded = new DigitalInput(9);
        LiveWindow.addSensor("Loader Pinball", "Loaded", loaderPinballLoaded);
        
        loaderPinballBallHandlerSolenoid1 = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Loader Pinball", "Ball Handler Solenoid 1", loaderPinballBallHandlerSolenoid1);
        
        loaderPinballBallHandlerSolenoid2 = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("Loader Pinball", "Ball Handler Solenoid 2", loaderPinballBallHandlerSolenoid2);
        
        shooterFlyMotor = new VictorSP(4);
        LiveWindow.addActuator("Shooter", "Fly Motor", (VictorSP) shooterFlyMotor);
        
        shooterFlyEncoder = new Encoder(10, 11, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Fly Encoder", shooterFlyEncoder);
        shooterFlyEncoder.setDistancePerPulse(1.0);
        shooterFlyEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterShooterSpeedControllerPID = new PIDController(1.0, 0.0, 0.0, 0.0, shooterFlyEncoder, shooterFlyMotor, 0.02);
        LiveWindow.addActuator("Shooter", "Shooter Speed Controller PID", shooterShooterSpeedControllerPID);
        shooterShooterSpeedControllerPID.setContinuous(false);
        shooterShooterSpeedControllerPID.setAbsoluteTolerance(0.2);

        shooterShooterSpeedControllerPID.setOutputRange(-1.0, 1.0);
        turretHorizontalPivot = new VictorSP(5);
        LiveWindow.addActuator("Turret", "Horizontal Pivot", (VictorSP) turretHorizontalPivot);
        
        turretLeftSideLimit = new DigitalInput(12);
        LiveWindow.addSensor("Turret", "Left Side Limit", turretLeftSideLimit);
        
        turretRightSideLimit = new DigitalInput(13);
        LiveWindow.addSensor("Turret", "Right Side Limit", turretRightSideLimit);
        
        turretPivotEncoder = new Encoder(14, 15, false, EncodingType.k4X);
        LiveWindow.addSensor("Turret", "Pivot Encoder", turretPivotEncoder);
        turretPivotEncoder.setDistancePerPulse(1.0);
        turretPivotEncoder.setPIDSourceType(PIDSourceType.kRate);
        unbeatableScalingMechanismWinchMotor = new VictorSP(6);
        LiveWindow.addActuator("Unbeatable Scaling Mechanism ", "Winch Motor", (VictorSP) unbeatableScalingMechanismWinchMotor);
        
        unbeatableScalingMechanismHookExtension = new VictorSP(7);
        LiveWindow.addActuator("Unbeatable Scaling Mechanism ", "Hook Extension", (VictorSP) unbeatableScalingMechanismHookExtension);
        
        unbeatableScalingMechanismClimberLimit = new DigitalInput(16);
        LiveWindow.addSensor("Unbeatable Scaling Mechanism ", "Climber Limit", unbeatableScalingMechanismClimberLimit);
        
        pneumaticsCompressor = new Compressor(0);
        
        
        pushUpPushUpPiston = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Push Up", "Push Up Piston", pushUpPushUpPiston);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
