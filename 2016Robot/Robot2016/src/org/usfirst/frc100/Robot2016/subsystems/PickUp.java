// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2016.subsystems;

import org.usfirst.frc100.Robot2016.Robot;
import org.usfirst.frc100.Robot2016.RobotMap;
import org.usfirst.frc100.Robot2016.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class PickUp extends Subsystem {

    private final DigitalInput upperLimit = RobotMap.pickUpUpperLimit;
    private final DigitalInput lowerLimit = RobotMap.pickUpLowerLimit;
    private final DigitalInput homeLimit = RobotMap.pickUpHomeLimit;
    private final SpeedController armAngleMotor = RobotMap.pickUpArmAngleMotor;
    private final AnalogPotentiometer pickUpPot = RobotMap.pickUpPickUpPot;
    private final DigitalInput portcullisSensor = RobotMap.pickUpPortcullisSensor;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {

        setDefaultCommand(new MovePickUp());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }

    public void takeJoystickInputs(double op){

    	armAngleMotor.set(op);

    }

    public double getArmAngleMotor(){

    	return armAngleMotor.get();

    }

    public boolean hitUpper(){

    	return upperLimit.get();

    }

    public boolean hitLower(){
    	return lowerLimit.get();
    }

    public void manualControl(double speed){

    	if(Robot.pickUp.hitUpper()){
    		if(Robot.oi.operator.getRawAxis(1) < 0){
    			armAngleMotor.set(speed);
    		}else{
    			Robot.pickUp.stop();
    		}
    	}else if(Robot.pickUp.hitLower()){
    		if(Robot.oi.operator.getRawAxis(1) > 0){
    			armAngleMotor.set(speed);
    		}else{
    			Robot.pickUp.stop();
    		}
    	}else{
    		armAngleMotor.set(speed);
    	}

    	Robot.pickUp.pickUpPot.get();

    }

    public void stop(){

    	armAngleMotor.set(0);

    }


    public double getArmPosVal(){
    	return pickUpPot.get();
    }

}

