// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2016.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc100.Robot2016.Robot;
import org.usfirst.frc100.Robot2016.RobotMap;

/**
 *
 */
public class Turn180 extends Command {
	private PIDController pid;
	private final SpeedController left = RobotMap.driveTrainLeft;
    private final SpeedController right = RobotMap.driveTrainRight;

	public Turn180()
	{
		requires(Robot.driveTrain);
		pid = new PIDController(.04, 0, 0,
             new PIDSource() {
                 PIDSourceType m_sourceType = PIDSourceType.kDisplacement;

                 public double pidGet() {
                	 return RobotMap.internalGyro.getAngle();
                 }

                 @Override
                 public void setPIDSourceType(PIDSourceType pidSource) {
                   m_sourceType = pidSource;
                 }

                 @Override
                 public PIDSourceType getPIDSourceType() {
                     return m_sourceType;
                 }
             },
             new PIDOutput() { public void pidWrite(double d) {
                 right.pidWrite(d);
                 left.pidWrite(d);
             }});
		pid.setAbsoluteTolerance(0.01);
     	pid.setSetpoint(180);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		// Get everything in a safe starting state.
		RobotMap.internalGyro.reset();
		pid.reset();
		pid.enable();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute(){

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return pid.onTarget();
	}

	// Called once after isFinished returns true
	protected void end() {

		// Stop PID and the wheels
		pid.disable();
		Robot.driveTrain.stop();

	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
