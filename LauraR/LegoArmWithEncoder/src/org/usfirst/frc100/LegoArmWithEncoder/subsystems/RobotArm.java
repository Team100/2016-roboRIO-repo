// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.LegoArmWithEncoder.subsystems;

import org.usfirst.frc100.LegoArmWithEncoder.Robot;
import org.usfirst.frc100.LegoArmWithEncoder.RobotMap;
import org.usfirst.frc100.LegoArmWithEncoder.calibration.CalibrationBuilder;
import org.usfirst.frc100.LegoArmWithEncoder.calibration.CalibrationBuilderImpl;
import org.usfirst.frc100.LegoArmWithEncoder.calibration.CalibrationSendable;
import org.usfirst.frc100.LegoArmWithEncoder.commands.HoldIt;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class RobotArm extends Subsystem {
	private final static String s_name = "Arm";
	public class IndexCalibrationPoint {
		double m_potPosition;
		double m_encoderPosition;
	}
	
	public class IndexCalibrationData implements CalibrationSendable <IndexCalibrationData>{
		protected IndexCalibrationPoint[] m_calibrationData;
		protected int m_curPtr = 0;
		private final static String s_key = "IndexCalibration";
		IndexCalibrationData (int numPoints) {
			m_calibrationData = new IndexCalibrationPoint[numPoints];
		}
		
		public void resetCurPtr () {
			m_curPtr = 0;
		}
		
		public boolean addCurData () {
			if (m_curPtr < m_calibrationData.length - 1) {
				m_calibrationData[m_curPtr] = new IndexCalibrationPoint();
				m_calibrationData [m_curPtr].m_encoderPosition = robotArmEncoder.get();
				m_calibrationData[m_curPtr].m_potPosition = armPositionPot.get();
				m_curPtr ++;
				return true;
			} else {
				return false;
			}			
		}

		@Override
		public String getName() {
			return s_key;
		}

		@Override
		public void setName(String pName) {
			//don't allow to change		
		}

		@Override
		public String getSubsystem() {
			return s_name;
		}

		@Override
		public void setSubsystem(String pSubsystem) {
			// don't allow to change			
		}

		@Override
		public void writeCalibrationData(CalibrationBuilder pBuilder) {
			double[] encLocations = new double[m_curPtr];
			double[] potPositions = new double[m_curPtr];
			for (int i=0; i < m_curPtr; i ++) {
				encLocations[i] = m_calibrationData[i].m_encoderPosition;
				potPositions[i] = m_calibrationData[i].m_potPosition;
			}
			//pBuilder.putDouble("TheAnswer", 42.0);	
			pBuilder.putDoubleArray("Encoder", encLocations);
			pBuilder.putDoubleArray("Potentiometer", potPositions);
		}
	

		private synchronized void readCalibrationData() {
			CalibrationBuilderImpl builder = Robot.calibration.getCalibrationBuilder(s_key);
			double[] encLocations = builder.getDoubleArray("Encoder", new double [0]);
			double[] potPositions = builder.getDoubleArray("Potentiometer", new double [0]);
			if (encLocations.length == potPositions.length) {
				m_curPtr = encLocations.length;
				
				for (int i = 0; i < m_curPtr; i++){
					IndexCalibrationPoint calibrationPoint = new IndexCalibrationPoint();
					m_calibrationData[i] = calibrationPoint;
					m_calibrationData[i].m_encoderPosition = encLocations[i];
					m_calibrationData[i].m_potPosition = potPositions[i];
				}	
			} 			
		}		
		
	}
    Servo armContinuousRotationServo = RobotMap.robotArmArmContinuousRotationServo;
    
    DigitalInput armUpperLimit = RobotMap.robotArmArmUpperLimit;
    DigitalInput armLowerLimit = RobotMap.robotArmArmLowerLimit;
    
    AnalogPotentiometer armPositionPot = RobotMap.robotArmArmPositionPot;
    
    DigitalInput encoderA = RobotMap.robotArmEncoderA;
    DigitalInput encoderB = RobotMap.robotArmEncoderB;
    DigitalInput encoderIdx = RobotMap.robotArmEncoderIndex;
    Encoder robotArmEncoder = new Encoder(encoderA, encoderB);
    Counter indexCounter = new Counter(encoderIdx);
    
    private boolean m_isHomed = false;
    private double m_homePotValue = 0.0;
    private IndexCalibrationData m_indexCalibrationData = new IndexCalibrationData(80);
    
    final static String ntPrefix = "RobotArm/"; // Prefix for network table variables
    
   	public RobotArm() {
   		// Add variables to Live Windows
	    this.addChild("Upper Limit", armUpperLimit);
	    this.addChild("Lower Limit", armLowerLimit);
	    this.addChild("Servo", armContinuousRotationServo);
	    this.addChild("EncoderA", encoderA);
	    this.addChild("EncoderB", encoderB);
	    this.addChild("EncoderIndex", encoderIdx);
	    this.addChild("Potentiometer", armPositionPot);
	    this.addChild("Encoder", robotArmEncoder);
	    this.addChild("IndexCounter", indexCounter); 
	    // try to read calibration data from file
	    m_indexCalibrationData.readCalibrationData();
	    
	    stop(); // make sure the arm won't move if we go into Test mode first
	}

	public void initDefaultCommand() {
        setDefaultCommand(new HoldIt());
    }
    
    public void raise() {
    	if (isAtHighLimit()) {
    		stop();
    	} else {
    		armContinuousRotationServo.set(0.0);  
    	}
    }
    
    public void lower() {
    	if (isAtLowLimit()) {
    		stop();
    	}
    	else {
    		armContinuousRotationServo.set(1.0);
    	}
    }
    
    public void raiseAtSpeed(double speed) {
    	if (isAtHighLimit() || speed > 1.0 || speed < 0.0) {
    		stop();
    	} else {
    		armContinuousRotationServo.set( 0.5 - (speed/2.0));  
    	}
    }
    
    public void lowerAtSpeed(double speed) {
    	if (isAtLowLimit()|| speed > 1.0 || speed < 0.0) {
    		stop();
    	}
    	else {
    		armContinuousRotationServo.set(0.5 + (speed/2.0));
    	}
    }
    
    public void stop() {
    	armContinuousRotationServo.set(0.5);
    }
    
    public boolean isAtLowLimit() {
    	return armLowerLimit.get();
    }
    
    public boolean isAtHighLimit() {
    	return armUpperLimit.get();
    }
    
    public double getPotValue() {
    	return armPositionPot.get();
    }
    
    private void resetEncoder () {
    	robotArmEncoder.reset();
    }
    
    public boolean isHomed() {
    	return m_isHomed;
    }
    
    public double getHomePotValue () {
    	return m_homePotValue;
    }
    
    public void setHome() {
    	m_isHomed = true;
    	m_homePotValue = getPotValue();
    	resetEncoder();
    }
    
    public void updateIndexCalibrationPoint () {
    	m_indexCalibrationData.addCurData();
    }
    
    public void resetIndexCalibration() {
    	m_indexCalibrationData.resetCurPtr();
    }
    
    public void printIndexCalibration(){
    	for (int i = 0; i < m_indexCalibrationData.m_curPtr; i ++) {
    		IndexCalibrationPoint data = m_indexCalibrationData.m_calibrationData[i];
    		System.out.println(data.m_encoderPosition + ", " + data.m_potPosition);
    	}
    	Robot.calibration.putCalibrationData(m_indexCalibrationData);
    }
    
    public void updateDashboard()
    {
    	// Show variables in smart Dashboard
        SmartDashboard.putNumber(ntPrefix + "Arm Pot", getPotValue());
        SmartDashboard.putBoolean(ntPrefix + "Arm Hi", isAtHighLimit());
        SmartDashboard.putBoolean(ntPrefix + "Arm Lo", isAtLowLimit());
        //SmartDashboard.putBoolean(ntPrefix + "Arm Encoder A", encoderA.get());
        //SmartDashboard.putBoolean(ntPrefix + "Arm Encoder B", encoderB.get());
        //SmartDashboard.putBoolean(ntPrefix + "Arm Encoder Index", encoderIdx.get());
        SmartDashboard.putNumber(ntPrefix + "Arm Encoder Position", robotArmEncoder.getDistance());
        SmartDashboard.putNumber(ntPrefix + "Arm Encoder Rate", robotArmEncoder.getRate());
        SmartDashboard.putNumber(ntPrefix + "Arm Index Counter", indexCounter.get());
        SmartDashboard.putNumber(ntPrefix + "Servo", armContinuousRotationServo.get());
        SmartDashboard.putNumber(ntPrefix + "Arm Home Pot Value", getHomePotValue());

    }
}

