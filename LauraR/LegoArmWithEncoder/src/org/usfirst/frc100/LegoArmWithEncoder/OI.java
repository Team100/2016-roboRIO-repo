// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.LegoArmWithEncoder;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.LegoArmWithEncoder.commands.*;
import org.usfirst.frc100.LegoArmWithEncoder.subsystems.RobotArm;
import org.usfirst.frc100.LegoArmWithEncoder.triggers.DoubleButton;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystick1MoveUp;
    public JoystickButton joystick2MoveDown;
    public JoystickButton joystick3Home;
    public JoystickButton joystick9CalibrateIndices;
    public JoystickButton joystick10CalibrateSpeed;
    public JoystickButton joystick5GoToPreset1;
    public JoystickButton joystick7GoToPreset2;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        joystick2MoveDown = new JoystickButton(joystick1, 2);
        joystick2MoveDown.whileHeld(new MoveDown());
        
        joystick1MoveUp = new JoystickButton(joystick1, 1);
        joystick1MoveUp.whileHeld(new MoveUp());
        
        new JoystickButton(joystick1, 6).whenPressed(new ClawOpen());
        new JoystickButton(joystick1, 8).whenPressed(new ClawClose());
        
        JoystickButton joystick3Home = new JoystickButton(joystick1, 3);
        joystick3Home.whenPressed(new ArmHome ());
              
        JoystickButton joystick7GoToPreset2 = new JoystickButton(joystick1, 7);
        joystick7GoToPreset2.whenPressed(new ArmGoToPosition (35000.0));

        
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("MoveUp", new MoveUp());
        SmartDashboard.putData("MoveDown", new MoveDown());
        SmartDashboard.putData("HoldIt", new HoldIt());
        SmartDashboard.putData("ArmDeltaPosUp", new ArmMoveDeltaPosition(RobotArm.Direction.kUp));
        SmartDashboard.putData("ArmDeltaPosDown",new ArmMoveDeltaPosition(RobotArm.Direction.kDown));
        SmartDashboard.putData("ArmStepPosUp",new ArmStepDeltaPosition(RobotArm.Direction.kUp));
        SmartDashboard.putData("ArmStepPosDown",new ArmStepDeltaPosition(RobotArm.Direction.kDown));
        SmartDashboard.putData("ArmJogUp",new ArmJog(RobotArm.Direction.kUp));
        SmartDashboard.putData("ArmJogDown",new ArmJog(RobotArm.Direction.kDown));
        SmartDashboard.putData("ArmFullCalibrate",new ArmFullCalibrate());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

