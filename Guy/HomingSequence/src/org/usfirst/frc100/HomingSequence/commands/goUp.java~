// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.HomingSequence.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.HomingSequence.OI;
import org.usfirst.frc100.HomingSequence.Robot;
import org.usfirst.frc100.HomingSequence.RobotMap;

import com.ctre.phoenix.motorcontrol.ControlMode;

/**
 *
 */
public class goUp extends Command {
	private static boolean done;
	public static boolean going;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public goUp() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	done = false;
    	going = false;
    	RobotMap.elevatorMotorElevator.set(ControlMode.MotionMagic, 25000);

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	going = true;
    	if(RobotMap.elevatorMotorElevator.getSelectedSensorPosition(0) > RobotMap.elevatorMotorElevator.getSelectedSensorPosition(0)-5 && RobotMap.elevatorMotorElevator.getSelectedSensorPosition(0) < RobotMap.elevatorMotorElevator.getSelectedSensorPosition(0)+5){
    		RobotMap.elevatorMotorElevator.set(ControlMode.PercentOutput, OI.joystick1.getY()/1.5);
    		if(!OI.button1.get()){
    			done = true;
    		}
    	}
    	SmartDashboard.putBoolean("Going", going);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
