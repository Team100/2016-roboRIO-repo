// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot;

import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc0.MyRobot.commands.*;
import org.usfirst.frc0.MyRobot.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
	public static Preferences prefs;
	public static double PIDmotor12;
    public static OI oi;
    public static double leftYstick;
    public static StringBuilder _sb = new StringBuilder();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static PIDDriveTrain pIDDriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pIDDriveTrain = new PIDDriveTrain();
        prefs = Preferences.getInstance();
        RobotMap.pIDDriveTrainTalonSRX1.configNominalOutputForward(0,0);
        RobotMap.pIDDriveTrainTalonSRX1.configPeakOutputReverse(12, -12);
        /* set closed loop gains in slot0 - see documentation */
        RobotMap.pIDDriveTrainTalonSRX1.selectProfileSlot(0,0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kP(0, 0.5,0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kI(0, 0.1,0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kD(0, 0,0);
        RobotMap.pIDDriveTrainTalonSRX1.configMotionCruiseVelocity(1,0);
        RobotMap.pIDDriveTrainTalonSRX1.configMotionAcceleration(0,0);
		//PIDmotor12 = SmartDashboard.getNumber("PIDMotor1", (Double) null);
		//armDownPosition = prefs.getDouble("ArmDownPosition", 4.);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Encoder", RobotMap.pIDDriveTrainTalonSRX1.getSelectedSensorPosition(0));
        SmartDashboard.putNumber("Encoder2", RobotMap.pIDDriveTrainTalonSRX2.getSelectedSensorPosition(0));
        SmartDashboard.putString("Up One", "Button 1(X) Value: 1000");
        SmartDashboard.putString("Up Two", "Button 2(A) Value: 100");
        SmartDashboard.putString("Up Three", "Button 3(B) Value: 5000");

       //SmartDashboard.putNumber("MotorPIDNumber", PIDmotor1);
        SmartDashboard.putBoolean("UpOne", UpOne.upOne);
        leftYstick = -1.0 * OI.joystick1.getY(/*AxisType.kY*/);
        double motorOutput = RobotMap.pIDDriveTrainTalonSRX1.getMotorOutputVoltage() / RobotMap.pIDDriveTrainTalonSRX1.getBusVoltage();
        /* prepare line to print */
        _sb.append("\tout:");
        _sb.append(motorOutput);
        _sb.append("\tspd:");
        _sb.append(RobotMap.pIDDriveTrainTalonSRX1.getSelectedSensorVelocity(0));
        if (OI.joystick1.getRawButton(1)) {
        	/* Motion Magic */
        	double targetPos = leftYstick * 10.0; /* 10 Rotations in either direction */
        	RobotMap.pIDDriveTrainTalonSRX1.set(ControlMode.MotionMagic, 10000);
        	RobotMap.pIDDriveTrainTalonSRX1.set(10000);
        	/* append more signals to print when in speed mode. */
        	_sb.append("\terr:");
        	_sb.append(RobotMap.pIDDriveTrainTalonSRX1.getClosedLoopError(0));
        	_sb.append("\ttrg:");
        	_sb.append(10000);
        } else {
        		/* Percent voltage mode */
        	RobotMap.pIDDriveTrainTalonSRX1.set(ControlMode.PercentOutput,0);
        	RobotMap.pIDDriveTrainTalonSRX1.set(leftYstick);
        }
        /* instrumentation */
        	Instrum.Process(RobotMap.pIDDriveTrainTalonSRX1, _sb);

    }
}
