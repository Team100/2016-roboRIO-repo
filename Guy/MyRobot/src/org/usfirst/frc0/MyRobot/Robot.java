// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
/**
 * Example demonstrating the motion magic control mode.
 * Tested with Logitech F710 USB Gamepad inserted into Driver Station.
 * 
 * Be sure to select the correct feedback sensor using SetFeedbackDevice() below.
 *
 * After deploying/debugging this to your RIO, first use the left Y-stick 
 * to throttle the Talon manually.  This will confirm your hardware setup/sensors
 * and will allow you to take initial measurements.
 * 
 * Be sure to confirm that when the Talon is driving forward (green) the 
 * position sensor is moving in a positive direction.  If this is not the 
 * cause, flip the boolean input to the reverseSensor() call below.
 *
 * Once you've ensured your feedback device is in-phase with the motor,
 * and followed the walk-through in the Talon SRX Software Reference Manual,
 * use button1 to motion-magic servo to target position specified by the gamepad stick.
 */

package org.usfirst.frc0.MyRobot;

import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.concurrent.TimeUnit;

import org.usfirst.frc0.MyRobot.commands.*;
import org.usfirst.frc0.MyRobot.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
	public static Preferences prefs;
	public static double PIDmotor12;
    public static OI oi;
    public static double P;
	public static double F;
	public static double I;
	public static double D;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static PIDDriveTrain pIDDriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pIDDriveTrain = new PIDDriveTrain();
		prefs = Preferences.getInstance();
		prefs.putDouble("P", 5);
		prefs.putDouble("I", 0.01);
		prefs.putDouble("D", 1);
		prefs.putDouble("F", 0.5);
		RobotMap.pIDDriveTrainTalonSRX1.configClosedloopRamp(0, 0);
        RobotMap.pIDDriveTrainTalonSRX1.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        RobotMap.pIDDriveTrainTalonSRX1.configOpenloopRamp(0, 0);
        RobotMap.pIDDriveTrainTalonSRX1.configMotionCruiseVelocity(70, 0);
        RobotMap.pIDDriveTrainTalonSRX1.configMotionAcceleration(10, 0);
        RobotMap.pIDDriveTrainTalonSRX1.selectProfileSlot(0, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kP(0, 5.0, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kI(0, 0.01, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kD(0, 1, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kF(0, 0.5, 0);
        RobotMap.pIDDriveTrainTalonSRX1.setInverted(true);
        RobotMap.pIDDriveTrainTalonSRX1.setSensorPhase(true);
        RobotMap.pIDDriveTrainTalonSRX1.configNominalOutputForward(0.0f, 0);
        RobotMap.pIDDriveTrainTalonSRX1.configNominalOutputReverse(0.0f, 0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	P = prefs.getDouble("P", 0);
		I = prefs.getDouble("I", 0);
		D = prefs.getDouble("D", 0);
		F = prefs.getDouble("F", 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kP(0, P, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kI(0, I, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kD(0, D, 0);
        RobotMap.pIDDriveTrainTalonSRX1.config_kF(0, F, 0);
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
		SmartDashboard.putNumber("TalonSRXVoltage", RobotMap.pIDDriveTrainTalonSRX1.getMotorOutputVoltage());
		SmartDashboard.putNumber("TalonSRXError", RobotMap.pIDDriveTrainTalonSRX1.getClosedLoopError(0));
		SmartDashboard.putNumber("EncoderValueForTalonSRX1", RobotMap.pIDDriveTrainTalonSRX1.getSelectedSensorPosition(0));
		SmartDashboard.putNumber("TalonSRX1Velocity", RobotMap.pIDDriveTrainTalonSRX1.getSelectedSensorVelocity(0));
		//SmartDashboard.putNumber("Desiried SetPoint", positionSetpoint);

        if (OI.joystick1.getRawButton(1)) {
			double targetPos = OI.joystick1.getY() * 1680 * 10.0;
			RobotMap.pIDDriveTrainTalonSRX1.set(ControlMode.MotionMagic, 1000);
			System.out.println("go!");
		//} else if(m_joystick.getRawButton(2)){
	        //RobotMap.pIDDriveTrainTalonSRX1.configClosedloopRamp(0, 0);
			
			//RobotMap.pIDDriveTrainTalonSRX1.set(ControlMode.Position, 16000);
		}else{
			RobotMap.pIDDriveTrainTalonSRX1.set(ControlMode.PercentOutput, -OI.joystick1.getY());
		}
    }
}
