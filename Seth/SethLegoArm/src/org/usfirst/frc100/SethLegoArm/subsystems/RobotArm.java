// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.SethLegoArm.subsystems;

import org.usfirst.frc100.SethLegoArm.RobotMap;
import org.usfirst.frc100.SethLegoArm.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class RobotArm extends PIDSubsystem {

    public RobotArm() {
		super(1, 0, 0);
		// TODO Auto-generated constructor stub
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Servo armContinuousRotationServo = RobotMap.robotArmArmContinuousRotationServo;
    private final DigitalInput armLowerLimit = RobotMap.robotArmArmLowerLimit;
    private final DigitalInput armUpperLimit = RobotMap.robotArmArmUpperLimit;
    private final AnalogPotentiometer armPositionPot = RobotMap.robotArmArmPositionPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new HoldIt());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    protected double returnPIDInput() {
		// TODO Auto-generated method stub
		return armPositionPot.get();
	}

	@Override
	protected void usePIDOutput(double output) {
		// TODO Auto-generated method stub
		armContinuousRotationServo.set(output);
	}

    public void raise(){
    	armContinuousRotationServo.set(1.0);
//    	if (isAtHighLimit()){
//    		stop();
//    	} else {
//    		armContinuousRotationServo.set(0.0);
//    	}
    }
    
    public void lower(){
    	armContinuousRotationServo.set(0.0);
//    	if(isAtLowLimit()){
//    		stop();
//    	} else {
//    		armContinuousRotationServo.set(1.0);
//    	}
    }
    
    public void stop(){
    	armContinuousRotationServo.set(0.5);
    }
    
//    public boolean isAtLowLimit(){
//    	return armLowerLimit.get();
//    }
//    
//    public boolean isAtHighLimit(){
//    	return armUpperLimit.get();
//    }
    
    public double getPotValue(){
    	return armPositionPot.get();
    }
}

