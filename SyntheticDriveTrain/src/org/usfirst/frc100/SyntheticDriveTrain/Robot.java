// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.SyntheticDriveTrain;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.SyntheticDriveTrain.commands.*;
import org.usfirst.frc100.SyntheticDriveTrain.subsystems.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
	public static Preferences prefs;
	public static double P;
	public static double F;
	public static double I;
	public static double D;
	//public static WPI_TalonSRX RobotMap.driveTrainRightMaster = RobotMap.driveTrainRightMaster;
	//public static WPI_TalonSRX RobotMap.driveTrainLeftMaster = RobotMap.driveTrainLeftMaster;
	Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	prefs = Preferences.getInstance();
		prefs.putDouble("P", 5);
		prefs.putDouble("I", 0.01);
		prefs.putDouble("D", 1);
		prefs.putDouble("F", 0.5);
		prefs.putDouble("Setpoint", 0);
        RobotMap.init();
        //configSettingsAnalog(RobotMap.driveTrainLeftMaster);
        //configSettingsEncoder(RobotMap.driveTrainRightMaster);
        RobotMap.driveTrainRightMaster.configClosedloopRamp(0, 0);
        RobotMap.driveTrainRightMaster.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        RobotMap.driveTrainRightMaster.configOpenloopRamp(0, 0);
        RobotMap.driveTrainRightMaster.configMotionCruiseVelocity(70, 0);
        RobotMap.driveTrainRightMaster.configMotionAcceleration(10, 0);
        RobotMap.driveTrainRightMaster.selectProfileSlot(0, 0);
        RobotMap.driveTrainRightMaster.config_kP(0, 5.0, 0);
        RobotMap.driveTrainRightMaster.config_kI(0, 0.01, 0);
        RobotMap.driveTrainRightMaster.config_kD(0, 1, 0);
        RobotMap.driveTrainRightMaster.config_kF(0, 0.5, 0);
        RobotMap.driveTrainRightMaster.setInverted(false);
        RobotMap.driveTrainRightMaster.setSensorPhase(true);
        RobotMap.driveTrainRightMaster.configNominalOutputForward(0.0f, 0);
        RobotMap.driveTrainRightMaster.configNominalOutputReverse(0.0f, 0);
        RobotMap.driveTrainLeftMaster.configClosedloopRamp(0, 0);
        RobotMap.driveTrainLeftMaster.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
        RobotMap.driveTrainLeftMaster.configOpenloopRamp(0, 0);
        RobotMap.driveTrainLeftMaster.configMotionCruiseVelocity(100, 0);
        RobotMap.driveTrainLeftMaster.configMotionAcceleration(50, 0);
        RobotMap.driveTrainLeftMaster.selectProfileSlot(0, 0);
        RobotMap.driveTrainLeftMaster.config_kP(0, 5.0, 0);
        RobotMap.driveTrainLeftMaster.config_kI(0, 0.01, 0);
        RobotMap.driveTrainLeftMaster.config_kD(0, 1, 0);
        RobotMap.driveTrainLeftMaster.config_kF(0, 0.5, 0);
        RobotMap.driveTrainLeftMaster.setInverted(false);
        RobotMap.driveTrainLeftMaster.setSensorPhase(true);
        RobotMap.driveTrainLeftMaster.configNominalOutputForward(0.0f, 0);
        RobotMap.driveTrainLeftMaster.configNominalOutputReverse(0.0f, 0);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
    	P = prefs.getDouble("P", 0);
		I = prefs.getDouble("I", 0);
		D = prefs.getDouble("D", 0);
		F = prefs.getDouble("F", 0);
        RobotMap.driveTrainLeftMaster.config_kP(0, P, 0);
        RobotMap.driveTrainLeftMaster.config_kI(0, I, 0);
        RobotMap.driveTrainLeftMaster.config_kD(0, D, 0);
        RobotMap.driveTrainLeftMaster.config_kF(0, F, 0);
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        SmartDashboard.putString("Motion magic start", RobotMap.driveTrainLeftMaster.getControlMode().toString());
        SmartDashboard.putNumber("Motion magic Position", RobotMap.driveTrainLeftMaster.getSelectedSensorPosition(0));
        SmartDashboard.putBoolean("Motion magic done", MotionMagicGo.done);
        if(OI.leftStick.getRawButton(2)||OI.rightStick.getRawButton(2)){
        	RobotMap.driveTrainLeftMaster.set(ControlMode.MotionMagic, 4000);
        }else{
        RobotMap.driveTrainRightMaster.set(ControlMode.PercentOutput, OI.rightStick.getY());
    	RobotMap.driveTrainLeftMaster.set(ControlMode.PercentOutput, OI.leftStick.getY());
    	}
        
    }
}
