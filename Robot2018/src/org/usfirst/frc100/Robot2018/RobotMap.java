// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2018;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainRightMaster;
    public static WPI_TalonSRX driveTrainLeftMaster;
    public static DifferentialDrive driveTrainDifferentialDrive1;
    public static WPI_VictorSPX driveTrainRightFollower;
    public static WPI_VictorSPX driveTrainLeftFollower;
    public static Solenoid driveTrainShiftingSolenoid;
    public static WPI_TalonSRX elevatorElevatorTalon;
    public static WPI_VictorSPX elevatorElevatorVictor;
    public static WPI_VictorSPX elevatorElevatorVictor2;
    public static DigitalInput elevatorElevatorLim1;
    public static DigitalInput elevatorElevatorLim2;
    public static Solenoid elevatorArmSolenoid;
    public static DigitalInput elevatorArmEleArmLim1;
    public static DigitalInput elevatorArmEleArmLim2;
    public static WPI_TalonSRX intakeIntakeMaster;
    public static WPI_VictorSPX intakeIntakeFollower;
    public static DigitalInput intakeIntakeDigSensorb;
    public static WPI_TalonSRX climbingArmClimbingTalon;
    public static DigitalInput climbingArmClimbLim1;
    public static DigitalInput climbingArmClimbLim2;
    public static WPI_TalonSRX winchWinchTalon;
    public static WPI_VictorSPX winchWinchVictor1;
    public static WPI_VictorSPX winchWinchVictor2;
    public static Compressor miscCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainRightMaster = new WPI_TalonSRX(0);
        driveTrainRightMaster.set(ControlMode.PercentOutput,0);

        
        driveTrainLeftMaster = new WPI_TalonSRX(1);
        driveTrainLeftMaster.set(ControlMode.PercentOutput,0);

        
        
        driveTrainDifferentialDrive1 = new DifferentialDrive(driveTrainRightMaster, driveTrainLeftMaster);
        driveTrainDifferentialDrive1.setSafetyEnabled(true);
        driveTrainDifferentialDrive1.setExpiration(0.1);
        driveTrainDifferentialDrive1.setMaxOutput(1.0);

        driveTrainRightFollower = new WPI_VictorSPX(2);
        driveTrainRightFollower.set(ControlMode.Follower, 0);
        driveTrainRightFollower.setSafetyEnabled(false);


        
        driveTrainLeftFollower = new WPI_VictorSPX(3);
        driveTrainLeftFollower.set(ControlMode.Follower, 1);
        driveTrainLeftFollower.setSafetyEnabled(false);


        
        driveTrainShiftingSolenoid = new Solenoid(0, 1);
        
        elevatorElevatorTalon = new WPI_TalonSRX(4);
        Robot.configSettingsAnalog(elevatorElevatorTalon);
        intakeIntakeMaster.set(ControlMode.PercentOutput,0);

        
        
        
        elevatorElevatorVictor = new WPI_VictorSPX(5);
        elevatorElevatorVictor.set(ControlMode.Follower,4);

        
        
        elevatorElevatorVictor2 = new WPI_VictorSPX(6);
        elevatorElevatorVictor2.set(ControlMode.Follower,4);
        
        
        elevatorElevatorLim1 = new DigitalInput(0);
        
        elevatorElevatorLim2 = new DigitalInput(1);
        
        elevatorArmSolenoid = new Solenoid(0, 0);
        
        elevatorArmEleArmLim1 = new DigitalInput(2);
        
        elevatorArmEleArmLim2 = new DigitalInput(3);
        
        intakeIntakeMaster = new WPI_TalonSRX(7);
        intakeIntakeMaster.set(ControlMode.PercentOutput,0);

        
        
        intakeIntakeFollower = new WPI_VictorSPX(8);
        intakeIntakeFollower.set(ControlMode.Follower,7);

        
        
        intakeIntakeDigSensorb = new DigitalInput(4);
        
        climbingArmClimbingTalon = new WPI_TalonSRX(9);
        Robot.configSettingsEncoder(climbingArmClimbingTalon);
        
        
        climbingArmClimbLim1 = new DigitalInput(5);
        // the top sensor
        
        climbingArmClimbLim2 = new DigitalInput(6);
        // the bottom sensor
        
        winchWinchTalon = new WPI_TalonSRX(10);
        winchWinchTalon.set(ControlMode.PercentOutput,0);

        
        
        winchWinchVictor1 = new WPI_VictorSPX(11);
        winchWinchVictor1.set(ControlMode.Follower,10);
        
        
        winchWinchVictor2 = new WPI_VictorSPX(12);
        winchWinchVictor2.set(ControlMode.Follower,10);

        
        
        miscCompressor = new Compressor(0);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTnjORS
    }
}
