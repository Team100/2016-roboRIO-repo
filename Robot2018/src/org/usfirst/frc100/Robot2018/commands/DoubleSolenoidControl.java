

package org.usfirst.frc100.Robot2018.commands;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.Robot2018.OI;
import org.usfirst.frc100.Robot2018.Robot;
import org.usfirst.frc100.Robot2018.RobotMap;

/**
 *
 */
public class DoubleSolenoidControl extends Command {
	public static boolean done;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DoubleSolenoidControl() {//runs constantly from the wrist subsystem
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        //requires(Robot.DoubleSolen);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.wrist);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	done = false;
    	//System.out.println("ENTERED DOUBLE SOLENOID=======================================");
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	//double solenoids have three states, kForward, kReverse, kOff (which coresponds to clamp, release, and neutral)
    	//if(Robot.MaunalDuo){// an if statment that would allow for maunal control or auto control
    		if(OI.operator.getRawButtonPressed(7)){//checks if the button is pressed
    			if(RobotMap.DuoSol.get() == Value.kForward){//checks if you are already in a forward mode
    				SmartDashboard.putString("DoubleSolenoidValue", "In");//tell smart dashboard that the solenoid is released
    				RobotMap.DuoSol.set(DoubleSolenoid.Value.kOff);// if it is forward than go to neutal
    				SmartDashboard.putString("DoubleSolenoidValue", "Neutral");

    			}else{
    				RobotMap.DuoSol.set(DoubleSolenoid.Value.kForward);//if its not in forward already than go to neutral
    				SmartDashboard.putString("DoubleSolenoidValue", "In");

    			}
    		}else if(OI.operator.getRawButtonPressed(5)){//if this buttons is pressed than:
    			if(RobotMap.DuoSol.get() == Value.kReverse){//if the solenod is alredy in reverse than:
    				SmartDashboard.putString("DoubleSolenoidValue", "Out");

    				RobotMap.DuoSol.set(Value.kOff);//turn the solenoid to neutral
    				SmartDashboard.putString("DoubleSolenoidValue", "Neutral");

    			}else{//if its not in reverse thank
    				RobotMap.DuoSol.set(Value.kReverse);//set the double soleoid to neutral
    				SmartDashboard.putString("DoubleSolenoidValue", "Out");

    			}
    		}
    	/*}else{//this is an auto solen mode that would use time to close and open the solenoid

	

    		if(OI.operator.getRawButtonPressed(9)){
    			RobotMap.DuoSol.set(DoubleSolenoid.Value.kForward);
    			new passTime(4);
    			RobotMap.DuoSol.set(DoubleSolenoid.Value.kOff);
    		}else if(OI.operator.getRawButtonPressed(10)){
    			if(RobotMap.DuoSol.get() == Value.kReverse){
    				RobotMap.DuoSol.set(Value.kOff);
    			}else{
    				RobotMap.DuoSol.set(Value.kReverse);
    			}	

    		//}

    	}*/


    	}

    

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}

