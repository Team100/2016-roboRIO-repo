// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2018;

import org.usfirst.frc100.Robot2017.commands.updatePreferneces;
import org.usfirst.frc100.Robot2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc100.Robot2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton button1;
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button6;
    public JoystickButton button7;
    public JoystickButton button8;
    public JoystickButton button9;
    public JoystickButton button10;
    public JoystickButton button11;
    public JoystickButton button12;
    
    public JoystickButton updatePrefs;
    
    public Joystick leftController;
    public Joystick rightStick;
    public Joystick autoModeSelect;
    public Joystick operator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operator = new Joystick(2);
        
        autoModeSelect = new Joystick(3);
        
        rightStick = new Joystick(1);
        
        leftController = new Joystick(0);
        
        /**
         * Update preferences on joystick button
         */
        
        updatePrefs = new JoystickButton(rightStick, 4); // Was set to (leftController, 4) before, but I had to change because (LC,4). Make sure that (rightStick, 4) is valid
        updatePrefs.whenPressed(new updatePreferences());
        
        button12 = new JoystickButton(leftController, 12);
        button12.whileHeld(new WinchWind());
        button11 = new JoystickButton(leftController, 11);
        button11.whileHeld(new ClimbAdjust());
        button10 = new JoystickButton(leftController, 10);
        button10.whenPressed(new ClimbDown());
        button9 = new JoystickButton(leftController, 9);
        button9.whenPressed(new ClimbUp());
        button8 = new JoystickButton(leftController, 8);
        button8.whileHeld(new IntakeOut());
        button7 = new JoystickButton(leftController, 7);
        button7.whileHeld(new IntakeIn());
        button6 = new JoystickButton(leftController, 6);
        button6.whileHeld(new ElevatorAdjust());
        button5 = new JoystickButton(leftController, 1);
        button5.whenPressed(new ElevatorArmDown());
        button4 = new JoystickButton(leftController, 4);
        button4.whenPressed(new ElevatorArmUp());
        button3 = new JoystickButton(leftController, 3);
        button3.whenPressed(new ElevatorDown());
        button2 = new JoystickButton(leftController, 2);
        button2.whenPressed(new ElevatorUp());
        button1 = new JoystickButton(leftController, 1);
        button1.whileHeld(new Drive());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("ElevatorUp", new ElevatorUp());
        SmartDashboard.putData("ElevatorDown", new ElevatorDown());
        SmartDashboard.putData("ElevatorArmUp", new ElevatorArmUp());
        SmartDashboard.putData("ElevatorArmDown", new ElevatorArmDown());
        SmartDashboard.putData("ElevatorAdjust", new ElevatorAdjust());
        SmartDashboard.putData("IntakeIn", new IntakeIn());
        SmartDashboard.putData("IntakeOut", new IntakeOut());
        SmartDashboard.putData("ClimbUp", new ClimbUp());
        SmartDashboard.putData("ClimbDown", new ClimbDown());
        SmartDashboard.putData("ClimbAdjust", new ClimbAdjust());
        SmartDashboard.putData("WinchWind", new WinchWind());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftController() {
        return leftController;
    }

    public Joystick getRightStick() {
        return rightStick;
    }

    public Joystick getAutoModeSelect() {
        return autoModeSelect;
    }

    public Joystick getOperator() {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

