//m, n cvklcvmkxfdrtxfgklerer/;zdv botBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.TalonConfig.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc100.TalonConfig.Robot;
import org.usfirst.frc100.TalonConfig.RobotMap;

//import dv dvg bedm.lm.lebfm.lsbt,lebtq,eb,ebtebtslebtmkbgr k.;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
public class ConfigTalons extends Command {
	public static WPI_TalonSRX talon = RobotMap.driveTrainSRX1;
	public static WPI_TalonSRX talon2 = RobotMap.driveTrainSRX2;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ConfigTalons() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	talon2.configClosedloopRamp(1, 0);
    	talon.configClosedloopRamp(1, 0);
    	talon.configOpenloopRamp(1, 0);
    	talon2.configOpenloopRamp(1, 0);
    	talon.configNominalOutputForward(0, 0);
    	talon2.configNominalOutputForward(0, 0);
    	talon.configPeakOutputReverse(0, 0);
    	talon2.configPeakOutputReverse(0, 0);
    	talon.setSensorPhase(true);
    	talon2.setSensorPhase(true);
    	talon.changeMotionControlFramePeriod(0);
    	talon2.changeMotionControlFramePeriod(0);
    	talon.clearMotionProfileHasUnderrun(0);
    	talon2.clearMotionProfileHasUnderrun(0);
    	talon.clearMotionProfileTrajectories();
    	talon2.clearMotionProfileTrajectories();
    	talon.clearStickyFaults(0);
    	talon2.clearStickyFaults(0);
    	talon.config_IntegralZone(0, 0, 0);
    	talon2.config_IntegralZone(0, 0, 0);
    	talon.config_kD(0, 0, 0);
    	talon2.config_kD(0, 0, 0);
    	talon.config_kF(0, 0, 0);
    	talon2.config_kF(0, 0, 0);
    	talon.config_kI(0, 0, 0);
    	talon2.config_kI(0, 0, 0);
    	talon.configAllowableClosedloopError(0, 0, 0);
    	talon2.configAllowableClosedloopError(0, 0, 0);
    	talon.configContinuousCurrentLimit(0, 0);
    	talon2.configContinuousCurrentLimit(0, 0);
    	talon.configForwardSoftLimitEnable(true, 0);
    	talon2.configForwardSoftLimitEnable(true, 0);
    	talon.configGetCustomParam(0, 0);
    	talon2.configGetCustomParam(0, 0);
    	talon.configGetParameter(0, 0, 0);
    	talon2.configGetParameter(0, 0, 0);
    	talon.configMaxIntegralAccumulator(0, 0, 0);
    	talon2.configMaxIntegralAccumulator(0, 0, 0);
    	talon.configMotionAcceleration(70, 0);
    	talon2.configMotionAcceleration(70, 0);
    	talon.configMotionCruiseVelocity(100, 0);
    	talon2.configMotionCruiseVelocity(100, 0);
    	talon.configMotionProfileTrajectoryPeriod(0, 0);
    	talon2.configMotionProfileTrajectoryPeriod(0, 0);
    	talon.configNeutralDeadband(0, 0);
    	talon2.configNeutralDeadband(0, 0);
    	talon.configPeakCurrentDuration(0, 0);
    	talon2.configPeakCurrentDuration(0, 0);
    	talon.configPeakCurrentLimit(0, 0);
    	talon2.configPeakCurrentLimit(0,0);
    	talon.configPeakOutputForward(0, 0);
    	talon2.configPeakOutputForward(0,0);
    	talon.configPeakOutputReverse(0, 0);
    	talon2.configPeakOutputReverse(0, 0);
    	//talon.configRemoteFeedbackFilter(0, null, 0, 0)
    	//talon2.configRemoteFeedbackFilter(0, remoteSensorSource, 0, 0);
    	talon.configReverseLimitSwitchSource(null, null, 0);
    	talon2.configReverseLimitSwitchSource(null, null, 0);
    	talon.configReverseSoftLimitEnable(true, 0);
    	talon2.configReverseSoftLimitEnable(true, 0);
    	talon.configReverseSoftLimitThreshold(0, 0);
    	talon2.configReverseSoftLimitThreshold(0, 0);
    	talon.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
    	talon2.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, 0);
    	talon.configSensorTerm(null, null, 0);
    	talon2.configSensorTerm(null, null, 0);
    	talon.configSetCustomParam(0, 0, 0);
    	talon2.configSetCustomParam(0, 0, 0);
    	talon.configSetParameter(0, 0, 0, 0, 0);
    	talon2.configSetParameter(0, 0, 0, 0, 0);
    	talon.configVelocityMeasurementPeriod(null, 0);
    	talon2.configVelocityMeasurementPeriod(null, 0);
    	talon.configVelocityMeasurementWindow(0, 0);
    	talon2.configVelocityMeasurementWindow(0, 0);
    	talon.configVoltageCompSaturation(0, 0);
    	talon2.configVoltageCompSaturation(0,0);
    	talon.configVoltageMeasurementFilter(0, 0);
    	talon2.configVoltageMeasurementFilter(0, 0);
    	talon.enableCurrentLimit(true);
    	talon2.enableCurrentLimit(true);
    	talon.enableHeadingHold(true);
    	talon2.enableHeadingHold(true);
    	talon.enableVoltageCompensation(true);
    	talon2.enableVoltageCompensation(true);
    	talon.overrideLimitSwitchesEnable(true);
    	talon2.overrideLimitSwitchesEnable(true);
    	talon.overrideSoftLimitsEnable(true);
    	talon2.overrideSoftLimitsEnable(true);
    	talon.pidWrite(0);
    	talon2.pidWrite(0);
    	talon.pushMotionProfileTrajectory(null);
    	talon2.pushMotionProfileTrajectory(null);
    	talon.selectDemandType(true);
    	talon2.selectDemandType(true);
    	talon.selectProfileSlot(0, 0);
    	talon2.selectProfileSlot(0, 0);
    	talon.set(0);
    	talon2.set(0);
    	//talon.set(ControlMode.null, 0, 0);
    	//talon2.set(ControlMode.null, 0, 0);
    	talon.setControlFramePeriod(null, 0);
    	talon2.setControlFramePeriod(null, 0);
    	talon.setExpiration(0);
    	talon2.setExpiration(0);
    	talon.setIntegralAccumulator(0, 0, 0);
    	talon2.setIntegralAccumulator(0, 0, 0);
    	talon.setInverted(false);
    	talon2.setInverted(false);
    	talon.setName("Talon1");
    	talon2.setName("Talon2");
    	talon.setNeutralMode(null);
    	talon2.setNeutralMode(null);
    	talon.setSafetyEnabled(true);
    	talon2.setSafetyEnabled(true);
    	talon.setSelectedSensorPosition(0, 0, 0);
    	talon2.setSelectedSensorPosition(0, 0, 0);
    	talon.setSensorPhase(true);
    	talon2.setSensorPhase(true);
    	talon.setStatusFramePeriod(0, 0, 0);
    	
    
    	
    	
    	


    
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
