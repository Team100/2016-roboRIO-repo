#!/usr/bin/python3

"""
Simple skeleton program for running an OpenCV pipeline generated by GRIP and using NetworkTables to send data.

Users need to:

1. Import the generated GRIP pipeline, which should be generated in the same directory as this file.
2. Set the network table server IP. This is usually the robots address (roborio-TEAM-frc.local) or localhost
3. Handle putting the generated code into NetworkTables
"""

import cv2
import numpy as np

from networktables import NetworkTable

from grip import GripPipeline  # TODO change the default module and class, if needed

cx = None
ip = '127.0.0.1'
#cv2.namedWindow("Display")
myImage = cv2.imread("C:/Users/Team 100/GRIP/CardboardVisionTarget/files/myPic.jpg", cv2.IMREAD_COLOR)
#cv2.imshow("Display", myImage)
#cv2.waitKey(0)

#def extra_processing(pipeline: GripPipeline):
 #   """
 #   Performs extra processing on the pipeline's outputs and publishes data to NetworkTables.
 #   :param pipeline: the pipeline that just processed an image
 #   :return: None
  #  """
 #   # TODO: Users need to implement this.
  #  # Useful for converting OpenCV objects (e.g. contours) to something NetworkTables can understand.
   # pass


def main():
    try:
        NetworkTable.setTeam(100)  # TODO set your team number
        NetworkTable.setIPAddress(ip)
        NetworkTable.setClientMode()
        NetworkTable.initialize()
    except:
        print "Already Initialized"
    
    sd = NetworkTable.getTable('SmartDashboard')
    
    cap = cv2.VideoCapture(1)
    pipeline = GripPipeline()
                
    while True:
        ret, frame = cap.read()
        
        #cv2.WaitKey(0)
        if ret:
            pipeline.process(frame)  # TODO add extra parameters if the pipeline takes more than just a single image
            if pipeline.cx != None:
                sd.putNumber("centerX", pipeline.cx)
                sd.putNumber("centerY", pipeline.cy)
            
            #extra_processing(pipeline)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break;
    # When everything done, release the capture
    cap.release()

if __name__ == '__main__':
    main()
