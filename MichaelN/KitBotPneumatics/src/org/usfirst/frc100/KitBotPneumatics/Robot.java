// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.KitBotPneumatics;

import org.usfirst.frc100.KitBotPneumatics.commands.*;
import org.usfirst.frc100.KitBotPneumatics.subsystems.*;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    int count = 0;
    public static OI oi;
    public static DriveTrain driveTrain;
    public static Gear gear;
	public static Preferences prefs;
	public static updatePreferneces up;
	

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    
    	RobotMap.init();
    	prefs = Preferences.getInstance();
        driveTrain = new DriveTrain();
        gear = new Gear();
        oi = new OI();
        RobotMap.encoderRight.reset();
        

        autonomousCommand = new AutonomousCommand();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
    	RobotMap.encoderRight.reset();
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */

	public void teleopPeriodic() {


		//SmartDashboard.putNumber("voltage", RobotMap.pdp.getCurrent(3));
		
        Scheduler.getInstance().run();
      //  SmartDashboard.putNumber("right encoder", RobotMap.encoderRight.getDistance());
       // SmartDashboard.putNumber("gyro", RobotMap.internalGyro.getAngle());
     //   SmartDashboard.putNumber("encoderRate", RobotMap.encoderRight.getRate());
		SmartDashboard.putNumber("encoder distance", RobotMap.encoderRight.getDistance());
		SmartDashboard.putNumber("encoder distanceLeft", RobotMap.encoderLeft.getDistance());
		SmartDashboard.putNumber("encoder rate", RobotMap.encoderLeft.getRate());
		
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
