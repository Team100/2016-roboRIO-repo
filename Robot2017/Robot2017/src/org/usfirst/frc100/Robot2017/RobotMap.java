// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2017;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
	/*
    public static SpeedController driveTrainleftMotor;
    public static SpeedController driveTrainrightMotor;
    public static RobotDrive driveTraindrive;
    public static Encoder driveTrainleftEncoder;
    public static Encoder driveTrainrightEncoder;
    public static Solenoid driveTrainleftShifter;
    public static Solenoid driveTrainrightShifter;
    public static AnalogGyro driveTraindigialGyroUno;
    public static Ultrasonic driveTrainultraSanic;
    public static SpeedController intakeoutsideRoller;
    public static SpeedController intakehopperRoller;
    public static SpeedController intakebeltRoller;
    public static DigitalInput intakeballSensor;
    public static SpeedController peterssUnbeatableScalingMechanismWithoutpNeumaticswinchMotor;
    public static Encoder peterssUnbeatableScalingMechanismWithoutpNeumaticswinchEncoder;
    public static SpeedController shootermoter;
    public static Encoder shooterincoder;
    public static Compressor knewmaticscompresser;
    public static Solenoid gearMechrelease;
	*/
	
	//DriveTrain Things 
	
	public static Encoder driveTrainLeftEncoder;
	public static Encoder driveTrainRightEncoder;
	
	public static CANTalon rightMaster;
    public static CANTalon rightFollwer;
    public static CANTalon leftMaster;
    public static CANTalon leftFollower;
    
    public static RobotDrive driveTrainRobotDrive;
    
    public static ADXRS450_Gyro gyro;
    
    public static Solenoid driveTrainShifter;
	
	//GearMech Things
    
    public static Solenoid gearMechDrop;
    public static Solenoid gearMechFlap;
    
    //PickUp Things
    
	public static Encoder elevatorEncoder;
    
    public static VictorSP outsideRoller;
	public static VictorSP elevator;
	
    public static Solenoid pickUpFlap;
    public static Solenoid highGoalGate; //potental
    
    //PeterssUnbeatableScalingMechanismWithoutpNeumatics Things
    
	public static Encoder climberEncoder;
	
	public static VictorSP climberWinch;
	
	public static Solenoid climberDeployment; //potental
	
	//Shooter Things

    public static Solenoid dumperLift;
    
    //Other Things
    
    public static Compressor compressor;
    public static Compressor pressureSwitch;
    
    public static PowerDistributionPanel pdp;
	
    public static void init() {
    	//DriveTrain Things 
    	
    	driveTrainLeftEncoder = new Encoder(0,1);
    	LiveWindow.addSensor("driveTrain", "leftEncoder", driveTrainLeftEncoder);
    	driveTrainLeftEncoder.setDistancePerPulse(1.0/1937.2032);
    	
    	driveTrainRightEncoder = new Encoder(2, 3);
    	LiveWindow.addSensor("driveTrain", "rightEncoder", driveTrainRightEncoder);
    	driveTrainRightEncoder.setDistancePerPulse(1.0/1937.2032);
    	
    	rightMaster	= new CANTalon(5);
    	LiveWindow.addActuator("driveTrain", "rightMaster", rightMaster);
    	rightMaster.changeControlMode(TalonControlMode.PercentVbus);
    	
    	rightFollwer = new CANTalon(4);
    	LiveWindow.addActuator("driveTrain", "rightFollwer", rightFollwer);
    	rightFollwer.changeControlMode(TalonControlMode.Follower);
    	rightFollwer.set(5);
    	rightFollwer.setSafetyEnabled(false);
    	
    	leftMaster = new CANTalon(3);
    	LiveWindow.addActuator("driveTrain", "leftMaster", leftMaster);
    	leftMaster.changeControlMode(TalonControlMode.PercentVbus);
    	
    	leftFollower = new CANTalon(2);
    	LiveWindow.addActuator("driveTrain", "leftFollower", leftFollower);
    	leftFollower.changeControlMode(TalonControlMode.Follower);
    	leftFollower.set(3);
    	leftFollower.setSafetyEnabled(false);
        
    	driveTrainRobotDrive = new RobotDrive(rightMaster, leftMaster);
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
        gyro = new ADXRS450_Gyro();
        LiveWindow.addActuator("driveTrain", "gyro", gyro);
        
        driveTrainShifter = new Solenoid(0);
        LiveWindow.addActuator("driveTrain", "driveTrainShifter", driveTrainShifter);
    	
    	//GearMech Things
        
        gearMechDrop= new Solenoid(1);
        LiveWindow.addActuator("gearMech", "gearMechDrop", gearMechDrop);
        
        gearMechFlap= new Solenoid(2);
        LiveWindow.addActuator("gearMech", "gearMechFlap", gearMechFlap);
        
        //PickUp Things
        
        elevatorEncoder = new Encoder(6,7);
        LiveWindow.addActuator("pickUp", "elevatorEncoder", elevatorEncoder);
        
        outsideRoller = new VictorSP(0);
        LiveWindow.addActuator("pickUp", "outsideRoller", outsideRoller);
    	
    	pickUpFlap= new Solenoid(3);
    	LiveWindow.addActuator("pickUp", "pickUpFlap", pickUpFlap);
    	
    	highGoalGate= new Solenoid(6); //potental
    	LiveWindow.addActuator("pickUp", "highGoalGate", highGoalGate);
    	
    	//Duel Roll Thing
        
    	elevator = new VictorSP(1);
        LiveWindow.addActuator("pickUp", "elevator", elevator);
        
        dumperLift= new Solenoid(4);
        LiveWindow.addActuator("gearMech", "dumperLift", dumperLift);
        
        //PeterssUnbeatableScalingMechanismWithoutpNeumatics Things
        
    	climberEncoder = new Encoder(4,5);
    	LiveWindow.addActuator("peterssUnbeatableScalingMechanismWithoutpNeumatics", "climberEncoder", climberEncoder);
    	
    	climberWinch = new VictorSP(2);
    	LiveWindow.addActuator("peterssUnbeatableScalingMechanismWithoutpNeumatics", "climberWinch", climberWinch);
    	
    	climberDeployment= new Solenoid(5); //potental
    	LiveWindow.addActuator("peterssUnbeatableScalingMechanismWithoutpNeumatics", "climberDeployment", climberDeployment);
        
        //Other Things
        
        compressor = new Compressor();
        LiveWindow.addActuator("Other", "compressor", compressor);
        
        pressureSwitch = new Compressor();
        LiveWindow.addActuator("Other", "pressureSwitch", pressureSwitch);

        pdp = new PowerDistributionPanel();
        LiveWindow.addActuator("Other", "pdp", pdp);
        
    	/*
        driveTrainleftMotor = new VictorSP(0);
        LiveWindow.addActuator("driveTrain", "leftMotor", (VictorSP) driveTrainleftMotor);
        
        driveTrainrightMotor = new VictorSP(1);
        LiveWindow.addActuator("driveTrain", "rightMotor", (VictorSP) driveTrainrightMotor);
        
        driveTraindrive = new RobotDrive(driveTrainleftMotor, driveTrainrightMotor);
        
        driveTraindrive.setSafetyEnabled(true);
        driveTraindrive.setExpiration(0.1);
        driveTraindrive.setSensitivity(0.5);
        driveTraindrive.setMaxOutput(1.0);

        driveTrainleftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("driveTrain", "leftEncoder", driveTrainleftEncoder);
        driveTrainleftEncoder.setDistancePerPulse(1.0);
        driveTrainleftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainrightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("driveTrain", "rightEncoder", driveTrainrightEncoder);
        driveTrainrightEncoder.setDistancePerPulse(1.0);
        driveTrainrightEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainleftShifter = new Solenoid(0, 0);
        LiveWindow.addActuator("driveTrain", "leftShifter", driveTrainleftShifter);
        
        driveTrainrightShifter = new Solenoid(0, 1);
        LiveWindow.addActuator("driveTrain", "rightShifter", driveTrainrightShifter);
        
        driveTraindigialGyroUno = new AnalogGyro(0);
        LiveWindow.addSensor("driveTrain", "digialGyroUno", driveTraindigialGyroUno);
        driveTraindigialGyroUno.setSensitivity(0.007);
        driveTrainultraSanic = new Ultrasonic(4, 5);
        LiveWindow.addSensor("driveTrain", "ultraSanic", driveTrainultraSanic);
        
        intakeoutsideRoller = new VictorSP(2);
        LiveWindow.addActuator("intake", "outsideRoller", (VictorSP) intakeoutsideRoller);
        
        intakehopperRoller = new VictorSP(3);
        LiveWindow.addActuator("intake", "hopperRoller", (VictorSP) intakehopperRoller);
        
        intakebeltRoller = new VictorSP(4);
        LiveWindow.addActuator("intake", "beltRoller", (VictorSP) intakebeltRoller);
        
        intakeballSensor = new DigitalInput(6);
        LiveWindow.addSensor("intake", "ballSensor", intakeballSensor);
        
        peterssUnbeatableScalingMechanismWithoutpNeumaticswinchMotor = new VictorSP(5);
        LiveWindow.addActuator("peterssUnbeatableScalingMechanismWithoutpNeumatics", "winchMotor", (VictorSP) peterssUnbeatableScalingMechanismWithoutpNeumaticswinchMotor);
        
        peterssUnbeatableScalingMechanismWithoutpNeumaticswinchEncoder = new Encoder(7, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("peterssUnbeatableScalingMechanismWithoutpNeumatics", "winchEncoder", peterssUnbeatableScalingMechanismWithoutpNeumaticswinchEncoder);
        peterssUnbeatableScalingMechanismWithoutpNeumaticswinchEncoder.setDistancePerPulse(1.0);
        peterssUnbeatableScalingMechanismWithoutpNeumaticswinchEncoder.setPIDSourceType(PIDSourceType.kRate);
        shootermoter = new VictorSP(6);
        LiveWindow.addActuator("shooter", "moter", (VictorSP) shootermoter);
        
        shooterincoder = new Encoder(9, 10, false, EncodingType.k4X);
        LiveWindow.addSensor("shooter", "incoder", shooterincoder);
        shooterincoder.setDistancePerPulse(1.0);
        shooterincoder.setPIDSourceType(PIDSourceType.kRate);
        knewmaticscompresser = new Compressor(0);
        
        
        gearMechrelease = new Solenoid(0, 2);
        LiveWindow.addActuator("gearMech", "release", gearMechrelease);
        */

        
    }
}
