// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2017.subsystems;

import org.usfirst.frc100.Robot2017.Robot;
import org.usfirst.frc100.Robot2017.RobotMap;
import org.usfirst.frc100.Robot2017.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.driveTrainleftMotor;
    private final SpeedController rightMotor = RobotMap.driveTrainrightMotor;
    private final RobotDrive drive = RobotMap.driveTraindrive;
    private final Encoder leftEncoder = RobotMap.driveTrainleftEncoder;
    private final Encoder rightEncoder = RobotMap.driveTrainrightEncoder;
    private final Solenoid leftShifter = RobotMap.driveTrainleftShifter;
    private final Solenoid rightShifter = RobotMap.driveTrainrightShifter;
    private final AnalogGyro digialGyroUno = RobotMap.driveTraindigialGyroUno;
    private final Ultrasonic ultraSanic = RobotMap.driveTrainultraSanic;
    
    public double angle; 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        setDefaultCommand(new TankDrive()); 
    }
    
    public void tankIt(Joystick stick){
    	drive.tankDrive(stick.getRawAxis(1), -stick.getRawAxis(3)); 
    }
    
    public void initiGyro(){
    	digialGyroUno.initGyro(); 
    }
    
    public double getGyroAngle(){
    	angle = digialGyroUno.getAngle();
    	return angle; 
    }
    
    public void drive(){
    	drives(.15, -getGyroAngle()*.03); 
    }
    
    public void resetGyro(){
    	digialGyroUno.reset(); 
    }
    
    public void goToAngle(double destAngle){
    	SmartDashboard.putNumber("Angle", digialGyroUno.getAngle()); 
    	SmartDashboard.putNumber("Destination", destAngle);
    	if(digialGyroUno.getAngle() >= destAngle+2 || digialGyroUno.getAngle()<= destAngle-.5){
    		drive.tankDrive(0, 0);
    	}else if(destAngle > digialGyroUno.getAngle()){
    		//clockwise rotation
    		drive.tankDrive(0.4, -0.4);
    	}else{
    		//counter-clockwise rotation
    		drive.tankDrive(-0.4, 0.4); 
    	}
    }
    
    public void drives(double d, double e){
    	drive.tankDrive(d, e);
    }
    

    
    public void stop(){
    	drive.tankDrive(0.0, 0.0);
    	
    }
}

