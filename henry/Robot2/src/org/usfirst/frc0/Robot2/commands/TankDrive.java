// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Robot2.commands;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

//import org.usfirst.frc.team100.robot.commands.Drive;
import org.usfirst.frc0.Robot2.Robot;
import org.usfirst.frc0.Robot2.RobotMap;
import org.usfirst.frc0.Robot2.subsystems.DriveTrain;

import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
/**
 *
 */
public class  TankDrive extends Command {
	 boolean direction = true;
	 int distanceTraveled;
	//Ultrasonic ultra = new Ultrasonic(4,5);
		 SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
	    SpeedController speedController2 = RobotMap.driveTrainSpeedController2;
	   // PowerDistributionPanel pdp = new PowerDistributionPanel();
    public TankDrive(boolean driveing) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
           direction = driveing;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    public TankDrive()
    {
    	 requires(Robot.driveTrain);
    
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// ultra.setAutomaticMode(true);
    	Robot.driveTrain.initiGyro();
    	RobotMap.gyro.calibrate();
    	RobotMap.gyro.reset();
    }
    
   
   
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putNumber("distance", (RobotMap.encoderRight.getRaw() + RobotMap.encoderLeft.getRaw()) / 720 ); //12.6 inches per revolution 
    	SmartDashboard.putNumber("angle", RobotMap.gyro.getAngle());
    	SmartDashboard.putNumber("center", RobotMap.gyro.getCenter());
    	SmartDashboard.putNumber("offset", RobotMap.gyro.getOffset());
    	if(direction){Robot.driveTrain.tankIt(Robot.oi.joystick1);}
    	else{Robot.driveTrain.tankItReverse(Robot.oi.joystick1);}
    	if(RobotMap.gyro.getAngle() > 339 || RobotMap.gyro.getAngle() < -339)
    	{
    		RobotMap.gyro.reset();
    	}
    	//SmartDashboard.putNumber("voltage of 0", pdp.getCurrent(0));
    	//SmartDashboard.putNumber("voltage of 1", pdp.getCurrent(1));
    	//}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
