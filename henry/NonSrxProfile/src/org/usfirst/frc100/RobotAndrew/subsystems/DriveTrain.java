// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.RobotAndrew.subsystems;


import org.usfirst.frc100.RobotAndrew.RobotMap;
import org.usfirst.frc100.RobotAndrew.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;



/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController right = RobotMap.driveTrainright;
    private final SpeedController left = RobotMap.driveTrainleft;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    public PIDController pidVel;
    public PIDController pidPos;
    public double maxOutput;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
    	pidVel = new PIDController(10, 0, 0, new PIDSource() { // .04 0 0 for 180
			PIDSourceType m_sourceType = PIDSourceType.kDisplacement;

			public double pidGet() {
				return RobotMap.encoderRight.getRate();
			}

			@Override
			public void setPIDSourceType(PIDSourceType pidSource) {
				m_sourceType = pidSource;
			}

			@Override
			public PIDSourceType getPIDSourceType() {
				return m_sourceType;
			}
		}, new PIDOutput() {
			public void pidWrite(double v) {
				 maxOutput = v;
			}
		});
//pid.setPID(p, i, d);
    	pidPos = new PIDController(10, 0,  0, new PIDSource() { // .04 0 0 for 180
			PIDSourceType m_sourceType = PIDSourceType.kDisplacement;

			public double pidGet() {
				return (RobotMap.encoderRight.getDistance());
			}

			@Override
			public void setPIDSourceType(PIDSourceType pidSource) {
				m_sourceType = pidSource;
			}

			@Override
			public PIDSourceType getPIDSourceType() {
				return m_sourceType;
			}
		}, new PIDOutput() {
			public void pidWrite(double d) {
				double output = d;
				if(output > maxOutput) {
					output = maxOutput;
				}
				right.pidWrite(output); // /2

			}
		});
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
   // public void driveRobot(Joystick joy){
    	
    //}

	public void driveRobot(Joystick joystick1) {
		robotDrive.arcadeDrive(joystick1.getRawAxis(1), -joystick1.getRawAxis(2));
		// TODO Auto-generated method stub
		
	}
}

