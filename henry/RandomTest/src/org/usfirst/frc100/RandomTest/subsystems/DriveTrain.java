// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.RandomTest.subsystems;


import org.usfirst.frc100.RandomTest.Robot;
import org.usfirst.frc100.RandomTest.RobotMap;

import org.usfirst.frc100.RandomTest.commands.*;
//import org.usfirst.frc100.Robot2017.commands.TankDrive;


import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

//import edu.wpi.first.wpilibj.RobotDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */

public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX talonSRX1 = RobotMap.driveTrainTalonSRX1;
    private final WPI_TalonSRX talonSRX2 = RobotMap.driveTrainTalonSRX2;
    private final DifferentialDrive robotDriveTrain = RobotMap.driveTrainRobotDriveTrain;
    public PIDController pidAngle;
    public double anP; 
    public double anI; 
    public double anD;

    public DriveTrain(){
    	/*
    	if (!Robot.prefs.containsKey("angleP")) {
			Robot.prefs.putDouble("angleP", 0);
		}
		if (!Robot.prefs.containsKey("angleP")) {
			Robot.prefs.putDouble("angleP", 0);
		}
		if (!Robot.prefs.containsKey("angleP")) {
			Robot.prefs.putDouble("angleP", 0);
		} */
    	anP = Robot.prefs.getDouble("angleP",
				0);
		anI = Robot.prefs.getDouble("angleI",
				0);
		anD = Robot.prefs.getDouble("angleD",
				0);
  	  pidAngle = new PIDController(anP,  0, anD, anI,  new PIDSource() { // .58823
  			PIDSourceType m_sourceType = PIDSourceType.kDisplacement;

  			public double pidGet() {
  				return RobotMap.gyro.getAngle();
  			}

  			@Override
  			public void setPIDSourceType(PIDSourceType pidSource) {
  				m_sourceType = pidSource;
  			}

  			@Override
  			public PIDSourceType getPIDSourceType() {
  				return m_sourceType;
  			}
  		}, new PIDOutput() {
  			public void pidWrite(double d) {
  				SmartDashboard.putNumber("d", d);
  				//RobotMap.driveTrainTalonSRX1.set(d/1.5);///2);
  			//	RobotMap.driveTrainTalonSRX2.set(d/1.5);///2);
  				
  			}
  		});
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
    	setDefaultCommand(new Drive()); 
    }

    public void takeJoyInputs(Joystick joy){
    	//RobotMap.driveTrainTalonSRX1.set(ControlMode.PercentOutput, 0);
    	robotDriveTrain.arcadeDrive(joy.getRawAxis(1), joy.getRawAxis(4)); //4
    //	RobotMap.driveTrainTalonSRX2.set(joy.getRawAxis(1));
    	//RobotMap.driveTrainTalonSRX2.set(joy.getRawAxis(1));
    	SmartDashboard.putNumber("joy raw" , joy.getRawAxis(1));
    
    	//RobotMap.driveTrainTalonSRX1.configSelectedFeedbackSensor(0, 0, 0);
   // 	double modify = RobotMap.driveTrainTalonSRX1.getSelectedSensorPosition(0)/8192; 
    	//SmartDashboard.putNumber("SRX1 ENC POS", (RobotMap.driveTrainTalonSRX1.getSelectedSensorPosition(0))); //*10(for pulses per second) then divide by resolution 
    	//SmartDashboard.putNumber("SRX2 ENC POS", RobotMap.driveTrainTalonSRX2.getSelectedSensorPosition(0));
    }
    public void periodic() {
        // Put code here to be run every loop

    }
    public void stop(){
    	robotDriveTrain.arcadeDrive(0, 0);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

} 

