// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.RandomTest;

import edu.wpi.first.wpilibj.Preferences;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc100.RandomTest.commands.*;
import org.usfirst.frc100.RandomTest.subsystems.*;
//import org.usfirst.frc100.Robot2017.Robot;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Preferences prefs; 
    double P; 
    double I; 
    double D; 
    double time;
    double PL; 
    double IL; 
    double DL;
    double angleP; 
    double angleI; 
    double angleD; 
    
    double pathP; 
    double pathI; 
    double pathD; 
    double pathA;
    
    double FL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        prefs = Preferences.getInstance();
        if (!Robot.prefs.containsKey("P")) {
        	prefs.putDouble("P", 0);
        }
        if (!Robot.prefs.containsKey("I")) {
        	prefs.putDouble("I", 0);
        }
        if (!Robot.prefs.containsKey("D")) {
        	prefs.putDouble("D", 0);
        }
        
        if (!Robot.prefs.containsKey("PL")) {
        	prefs.putDouble("PL", 0);
        }
        if (!Robot.prefs.containsKey("IL")) {
        	prefs.putDouble("IL", 0);
        }
        if (!Robot.prefs.containsKey("DL")) {
        	prefs.putDouble("DL", 0);
        }
        if (!Robot.prefs.containsKey("FL")) {
        	prefs.putDouble("FL", 0);
        }
        if (!Robot.prefs.containsKey("time")) {
        	prefs.putDouble("time", 0);
        }
        if (!Robot.prefs.containsKey("angleP")) {
        	prefs.putDouble("angleP", 0);
        }
        if (!Robot.prefs.containsKey("angleI")) {
        	prefs.putDouble("angleI", 0);
        }
        if (!Robot.prefs.containsKey("angleD")) {
        	prefs.putDouble("angleD", 0);
        }
        if (!Robot.prefs.containsKey("pathP")) {
        	prefs.putDouble("pathP", 0);
        }
        if (!Robot.prefs.containsKey("pathI")) {
        	prefs.putDouble("pathI", 0);
        }
        if (!Robot.prefs.containsKey("pathD")) {
        	prefs.putDouble("pathD", 0);
        }
        if (!Robot.prefs.containsKey("pathA")) {
        	prefs.putDouble("pathA", 0);
        }
       
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
      //  RobotMap.ahrs.
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
    	
    //	RobotMap.ahrs.reset();
    	//Robot.driveTrain.pidAngle.disable();
    //	Robot.driveTrain.pidAngle.reset();
    	RobotMap.driveTrainTalonSRX1.setSelectedSensorPosition(0, 0, 0);
    	// RobotMap.driveTrainTalonSRX1.(0, 0, 0);
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();//1.04667)/10)*8192
        
    //    SmartDashboard.putNumber("SRX1 ENC POS", ((RobotMap.driveTrainTalonSRX1.getSelectedSensorVelocity(0)*10*1.04667)/8192));
	//     SmartDashboard.putNumber("SRX2 ENC POS", ((RobotMap.driveTrainTalonSRX2.getSelectedSensorVelocity(0)*10*1.04667)/8192));
    }
}
