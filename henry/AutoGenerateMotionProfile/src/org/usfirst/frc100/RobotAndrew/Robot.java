// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.RobotAndrew;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.RobotAndrew.commands.*;
import org.usfirst.frc100.RobotAndrew.subsystems.*;

public class Robot extends IterativeRobot {

    Command autonomousCommand;
    int count = 0;
    public static OI oi;
    public static DriveTrain driveTrain;
	public static Preferences prefs;
	public static updatePreferneces up;

    public void robotInit() {
    	RobotMap.init();
    	prefs = Preferences.getInstance();
        driveTrain = new DriveTrain();
        oi = new OI();
        RobotMap.encoderRight.reset();
        autonomousCommand = new AutonomousCommand();
    }

    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
    	RobotMap.encoderRight.reset();
    	RobotMap.encoderLeft.reset();
        if (autonomousCommand != null) autonomousCommand.cancel();
    }


	public void teleopPeriodic() {
        Scheduler.getInstance().run();
		SmartDashboard.putNumber("encoder distance", RobotMap.encoderRight.getDistance());
		SmartDashboard.putNumber("encoder distanceLeft", RobotMap.encoderLeft.getDistance());
		SmartDashboard.putNumber("encoder rate", RobotMap.encoderRight.getRate());
		SmartDashboard.putNumber("currnetAngle", RobotMap.internalGyro.getAngle());
		SmartDashboard.putNumber("angle setpoint", Robot.driveTrain.pidAngle.getSetpoint());
		SmartDashboard.putNumber("distance setpoint", Robot.driveTrain.pidPosLeft.getSetpoint());
		
		if(RobotMap.internalGyro.getAngle() >= 360 ||  RobotMap.internalGyro.getAngle() <= -360 ){
			RobotMap.internalGyro.reset();
		}
    }

    public void testPeriodic() {
        LiveWindow.run();
    }
}
