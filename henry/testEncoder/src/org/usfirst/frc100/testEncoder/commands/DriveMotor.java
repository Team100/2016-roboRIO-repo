// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.testEncoder.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc100.testEncoder.Robot;
import org.usfirst.frc100.testEncoder.RobotMap;
import org.usfirst.frc100.testEncoder.subsystems.AndyMark;

/**
 *
 */
public class DriveMotor extends Command {

	    private double setpoint;
	    
	    
	    public DriveMotor(double setpoint) {
	        this.setpoint = setpoint;
	        requires(Robot.andyMark);
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {
	    	Robot.andyMark.pidRight.setAbsoluteTolerance(0.3);
	    	Robot.andyMark.pidLeft.setAbsoluteTolerance(0.3);
			Robot.andyMark.pidRight.setSetpoint(this.setpoint);
			Robot.andyMark.pidLeft.setSetpoint(this.setpoint);
			Robot.andyMark.pidRight.enable();
			Robot.andyMark.pidLeft.enable();

	    }

	    // Called repeatedly when this Command is scheduled to run
	    public void execute() {
	    	//SmartDashboard.putNumber("setpoint", setpoint);
	    //	SmartDashboard.putNumber("rate of d value", AndyMark.returnD());
	    	//SmartDashboard.putNumber("rate of motor", AndyMark.returnSpeed());
	    	//Robot.andyMark.driveJoy(Robot.oi.joystick1);
	    	//Robot.andyMark.returnSpeed();
	    	SmartDashboard.putNumber("rightEncoder", RobotMap.encoderR.getRate());
	    	SmartDashboard.putNumber("leftEncoder", RobotMap.encoderL.getRate());
	    	Robot.andyMark.driveJoy(Robot.oi.joystick1);
	    
	    }
	    

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	    	
	        return Robot.andyMark.pidLeft.onTarget();
	       
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    }
	   
	}