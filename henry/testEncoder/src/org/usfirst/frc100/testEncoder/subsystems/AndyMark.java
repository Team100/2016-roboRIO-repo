// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.testEncoder.subsystems;

import java.util.ArrayList;

//import org.usfirst.frc.team100.robot.Robot;

import org.usfirst.frc100.testEncoder.RobotMap;
import org.usfirst.frc100.testEncoder.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class AndyMark extends PIDSubsystem {
	private static Encoder encoder;
	private static double stuff = 0;
    private final SpeedController encoderMotor = RobotMap.andyMarkencoderMotor;

    private static final double kP_real = 0, kI_real = 0.00,
    kP_simulation = 0.004, kI_simulation = 0.0;

    public AndyMark() {
        super(kP_real, kI_real, 0);
        getPIDController().setPID(kP_simulation, kI_simulation, 0, 0);
        setAbsoluteTolerance(0.0001);
        encoder = new Encoder(2,3);
        LiveWindow.addActuator("encoder", "PID", getPIDController());
        LiveWindow.addSensor("AndyMark", "encoder rate", encoder);
    }

    public void initDefaultCommand() {}

	
    public void log() {
     
    }

   protected double returnPIDInput() {
       return encoder.getRate()/1.5;
       
    }

    protected void usePIDOutput(double d) {
    	//d=-d/4;
    	//d +=.5;
    
    RobotMap.andyMarkencoderMotor.set(-d);
       ;
    }
    
    public void driveJoy(Joystick stick)
    {
    	//RobotMap.andyMarkencoderMotor.set(stick.getRawAxis(3));
    	//robotDrive41.arcadeDrive(stick.getRawAxis(1), -stick.getRawAxis(2));
    	//robotDrive41.arcadeDrive(-stick.getRawAxis(1), stick.getRawAxis(2));
    }
    public static double returnD()
    {
    	return stuff;
    }
    public  static double returnSpeed()
    {
      return encoder.getRate();
    }
    }
    
   


