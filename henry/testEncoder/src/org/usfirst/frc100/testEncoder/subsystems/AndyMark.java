// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.testEncoder.subsystems;

//import org.usfirst.frc.team100.robot.Robot;

import org.usfirst.frc100.testEncoder.RobotMap;
import org.usfirst.frc100.testEncoder.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class AndyMark extends PIDSubsystem {
	Encoder encoder;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController encoderMotor = RobotMap.andyMarkencoderMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double kP_real = 4, kI_real = 0.07,
            kP_simulation = 18, kI_simulation = 0.2;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public AndyMark() {
        super(kP_real, kI_real, 0);
        //if (Robot.isSimulation()) { // Check for simulation and update PID values
            getPIDController().setPID(kP_simulation, kI_simulation, 0, 0);
        //}
        setAbsoluteTolerance(0.005);
        encoder = new Encoder(2,3);
       
      //  motor = new Servo(0);
    

		// Let's show everything on the LiveWindow
      //  LiveWindow.addActuator("Elevator", "motor",  one);
       // LiveWindow.addSensor("Elevator", "Pot", (AnalogPotentiometer) pot);
       
        LiveWindow.addActuator("Elevator", "PID", getPIDController());
        LiveWindow.addSensor("encoder", "encoder rate", encoder);
       
    }

    public void initDefaultCommand() {}

	/**
	 * The log method puts interesting information to the SmartDashboard.
	 */
    public void log() {
     
    }

    /**
     * Use the potentiometer as the PID sensor. This method is automatically
     * called by the subsystem.
     */
   protected double returnPIDInput() {
       return encoder.getRate()/60;
    }

    /**
     * Use the motor as the PID output. This method is automatically called by
     * the subsystem.
     */
    protected void usePIDOutput(double d) {
    	//d=-d/4;
    	//d +=.5;
    	RobotMap.andyMarkencoderMotor.set(d);
        
        //SmartDashboard.putNumber("motor speed", motor.getAngle());
    }
    
    public void driveJoy(Joystick stick)
    {
    	RobotMap.andyMarkencoderMotor.set(stick.getRawAxis(1));
    	//robotDrive41.arcadeDrive(stick.getRawAxis(1), -stick.getRawAxis(2));
    	//robotDrive41.arcadeDrive(-stick.getRawAxis(1), stick.getRawAxis(2));
    }
   
}

